AWSTemplateFormatVersion: 2010-09-09
Parameters:
  DateTime:
    Description: ISO8601 datetime of CircleCI run
    Type: String
  EnvironmentName:
    Description: Environment name used for naming AWS Lambda Function name
    Type: String
  GitHash:
    Description: Hash of branch being deployed by CircleCI
    Type: String
  S3BucketName:
    Description: Name of S3 bucket containing media, documents, static assets
    Type: String
    Default: ky-dev
    AllowedPattern: '[a-z][a-z0-9.-][a-z0-9.-]*'
  Route53HostedZoneId:
    Description: ID of the Route53 Hosted Zone to create ALB and ACM Cert records in
    Type: String
  Route53HostNameFqdn:
    Description: Fully qualified host name for the ALB to create in Route53
    Type: String
  S3Endpoint:
    Description: ID of the Route53 Hosted Zone to create ALB and ACM Cert records in
    Type: String
  S3HostedZoneId:
    Description: Fully qualified host name for the ALB to create in Route53
    Type: String

Resources:
  WebsiteBucketLogs:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      AccessControl: LogDeliveryWrite
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      OwnershipControls:
        Rules:
          - ObjectOwnership: ObjectWriter
      BucketName: !Sub '${S3BucketName}-logs'

  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${S3BucketName}'
      VersioningConfiguration:
        Status: Enabled
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      Tags:
        - Key: GitHash
          Value: !Sub '${GitHash}'
        - Key: DateTime
          Value: !Sub '${DateTime}'
        - Key: StackName
          Value: !Sub '${AWS::StackName}'

  ## Specifying the CloudFront Distribution to server your Web Application
  WebOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: "CloudFrontOriginAccessIdentity for ${AWS::StackName}-${AWS::Region}"

  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: WebsiteBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: { "Fn::Join": [ " ", [ "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity", { Ref: WebOriginAccessIdentity } ] ] }
            Action:
              - s3:GetObject
            Resource: !Sub ${WebsiteBucket.Arn}/*

  ACMCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref Route53HostNameFqdn
      DomainValidationOptions:
        - DomainName:   !Ref Route53HostNameFqdn
          HostedZoneId: !Ref Route53HostedZoneId
      ValidationMethod: DNS

  CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Aliases:
            - !Ref Route53HostNameFqdn
          CustomErrorResponses:
            - ErrorCachingMinTTL: 0
              ErrorCode: 404
              ResponseCode: 404
              ResponsePagePath: '/error/404.html'
            - ErrorCachingMinTTL: 0
              ErrorCode: 403
              ResponseCode: 403
              ResponsePagePath: '/error/403.html'
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
            CachedMethods:
              - GET
              - HEAD
              - OPTIONS
            Compress: true
            DefaultTTL: 0
            MinTTL: 0
            MaxTTL: 0
            ForwardedValues:
              Cookies:
                Forward: none
              QueryString: true
            SmoothStreaming: false
            TargetOriginId: !Sub 'S3-${AWS::StackName}-root'
            ViewerProtocolPolicy: 'redirect-to-https'
            FunctionAssociations:
              - EventType: viewer-request
                FunctionARN: !GetAtt URIRewriteCloudFrontFunction.FunctionMetadata.FunctionARN
          DefaultRootObject: 'index.html'
          Enabled: true
          HttpVersion: http2
          IPV6Enabled: true
          Logging:
            Bucket: !GetAtt WebsiteBucketLogs.DomainName
            IncludeCookies: false
            Prefix: 'cdn/'
          Origins:
            - DomainName: !GetAtt WebsiteBucket.DomainName
              Id: !Sub 'S3-${AWS::StackName}-root'
              S3OriginConfig:
                OriginAccessIdentity: { "Fn::Join": [ "", [ "origin-access-identity/cloudfront/", { Ref: WebOriginAccessIdentity } ] ] }
          PriceClass: PriceClass_100
          ViewerCertificate:
            AcmCertificateArn: !Ref ACMCertificate
            MinimumProtocolVersion: TLSv1.1_2016
            SslSupportMethod: sni-only

  URIRewriteCloudFrontFunction:
    Type: AWS::CloudFront::Function
    Properties:
      Name: !Sub 'uri-rewrite-cloudfront-function-${EnvironmentName}'
      AutoPublish: true
      FunctionCode: !Sub |
        function handler(event) {
          var request = event.request;
          var uri = request.uri;
        
          // Check whether the URI is missing a file name.
          if (uri.endsWith('/')) {
            request.uri += 'index.html';
          }
            // Check whether the URI is missing a file extension.
          else if (!uri.includes('.')) {
            request.uri += '/index.html';
          }
        
          return request;
        }
      FunctionConfig:
        Comment: !Sub 'Add index.html to request URLs that donâ€™t include a file name'
        Runtime: cloudfront-js-1.0

  ResponseHeadersPolicy:
    Type: AWS::CloudFront::ResponseHeadersPolicy
    Properties:
      ResponseHeadersPolicyConfig:
        Name: !Sub '${AWS::StackName}-static-site-security-headers'
        SecurityHeadersConfig:
          StrictTransportSecurity:
            AccessControlMaxAgeSec: 63072000
            IncludeSubdomains: true
            Override: true
            Preload: true
          ContentSecurityPolicy:
            ContentSecurityPolicy: "default-src 'none'; img-src 'self'; script-src 'self'; style-src 'self'; object-src 'none'"
            Override: true
          ContentTypeOptions:
            Override: true
          FrameOptions:
            FrameOption: DENY
            Override: true
          ReferrerPolicy:
            ReferrerPolicy: 'same-origin'
            Override: true
          XSSProtection:
            ModeBlock: true
            Override: true
            Protection: true

  Route53RecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref Route53HostedZoneId # e.g., for <company_name>.com
      Comment: DNS Record for KoolYard Static Web
      RecordSets:
      - Name: !Sub '${Route53HostNameFqdn}.'
        Type: A
        AliasTarget:
          DNSName: !GetAtt CloudFrontDistribution.DomainName
          HostedZoneId: Z2FDTNDATAQYW2
